import base64
import os

def decode_archive(archive_name, content):
    with open(archive_name, "wb") as f:
        f.write(base64.b64decode(content))

decode_archive('pytorch_toolbelt-0.1.2.tar.gz', '')
os.system('pip install pytorch_toolbelt-0.1.2.tar.gz')

# Imports
import os
import math
import cv2
import torch
import pandas as pd
import numpy as np
import multiprocessing
import albumentations as A
from tqdm import tqdm
from torch.utils.data import Dataset
from torch import nn
from functools import partial
from pytorch_toolbelt.utils import fs
from pytorch_toolbelt.utils.torch_utils import to_numpy
from torch.utils.data import DataLoader
from pytorch_toolbelt.inference.tta import *
from pytorch_toolbelt.modules.encoders import *
from pytorch_toolbelt.modules.activations import swish
from pytorch_toolbelt.modules.pooling import *
from pytorch_toolbelt.modules.scse import *
import torch.nn.functional as F

# Functions
def tensor_from_rgb_image(image: np.ndarray) -> torch.Tensor:
    image = np.moveaxis(image, -1, 0)
    image = np.ascontiguousarray(image)
    image = torch.from_numpy(image)
    return image


def id_from_fname(fname: str):
    return os.path.splitext(os.path.basename(fname))[0]


def read_rgb_image(fname: str) -> np.ndarray:
    """Read RGB image from filesystem. This function uses PIL to load image since PIL respects EXIF image orientation flag.
    :param fname: Image file path
    :return: A numpy array with a loaded image in RGB format
    """
    from PIL import Image
    im = Image.open(fname)
    if im.mode != 'RGB':
        im = im.convert('RGB')
    image = np.asarray(im)
    return image


def get_class_names():
    CLASS_NAMES = [
        'No DR',
        'Mild',
        'Moderate',
        'Severe',
        'Proliferative DR'
    ]
    return CLASS_NAMES


class RetinopathyDataset(Dataset):
    def __init__(self, images, targets,
                 transform: A.Compose,
                 target_as_array=False,
                 dtype=int,
                 meta_features=False):
        if targets is not None:
            targets = np.array(targets)
            unique_targets = set(np.unique(targets))
            if len(unique_targets.difference({0, 1, 2, 3, 4})):
                raise ValueError('Unexpected targets in Y ' + str(unique_targets))

        self.meta_features = meta_features
        self.images = np.array(images)
        self.targets = targets
        self.transform = transform
        self.target_as_array = target_as_array
        self.dtype = dtype

    def __len__(self):
        return len(self.images)

    def __getitem__(self, item):
        image = cv2.imread(self.images[item])  # Read with OpenCV instead PIL. It's faster
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        height, width = image.shape[:2]

        image = self.transform(image=image)['image']
        data = {'image': tensor_from_rgb_image(image),
                'image_id': id_from_fname(self.images[item])}

        if self.meta_features:
            log_height = math.log(height)
            log_width = math.log(width)
            aspect_ratio = log_height / log_width
            mean = np.mean(image, axis=(0, 1))

            meta_features = np.array([
                log_height,
                log_width,
                aspect_ratio,
                mean[0],
                mean[1],
                mean[2]
            ])

            data['meta_features'] = meta_features

        if self.targets is not None:
            target = self.dtype(self.targets[item])
            if self.target_as_array:
                data['targets'] = np.array([target])
            else:
                data['targets'] = target

        return data


class BaselineClassificationModel(nn.Module):
    def __init__(self, encoder: EncoderModule, num_classes, dropout=0.2):
        super().__init__()
        self.encoder = encoder
        self.classifier = ClassifierModule(encoder.output_filters[-1], num_classes, dropout=dropout)

    def forward(self, input):
        features = self.encoder(input)[-1]
        logits, features = self.classifier(features)
        return {'logits': logits, 'features': features}


class RMSPool2d(nn.Module):
    """
    Root mean square pooling
    """

    def __init__(self):
        super().__init__()
        self.avg_pool = GlobalAvgPool2d()

    def forward(self, x):
        x_mean = torch.mean(x, dim=[2, 3], keepdim=True)
        avg_pool = self.avg_pool((x - x_mean) ** 2)
        return avg_pool.sqrt()


class Flatten(nn.Module):
    def __init__(self):
        super().__init__()

    def forward(self, x):
        return x.view(x.shape[0], -1)


class BaselineRegressionModel(nn.Module):
    def __init__(self, encoder: EncoderModule, num_dimensions=1, dropout=0.2):
        super().__init__()
        self.encoder = encoder
        self.regressor = RegressionModule(encoder.output_filters[-1], num_dimensions, dropout=dropout)

    def forward(self, input):
        features = self.encoder(input)[-1]
        logits, features = self.regressor(features)
        return {'logits': logits, 'features': features}


class RegressionModule(nn.Module):
    def __init__(self, input_features, output_classes, reduction=4, dropout=0.25):
        super().__init__()
        self.rms_pool = RMSPool2d()
        self.bn = nn.BatchNorm1d(input_features)
        self.drop = nn.Dropout(dropout, inplace=True)
        self.output_classes = output_classes

        bottleneck = input_features // reduction

        self.fc1 = nn.Linear(input_features, bottleneck)
        self.fc2 = nn.Linear(bottleneck, bottleneck)
        self.fc3 = nn.Linear(bottleneck, bottleneck)
        self.fc4 = nn.Linear(bottleneck, output_classes)

    def forward(self, input):
        x = self.rms_pool(input)
        features = x.view(x.size(0), -1)

        x = self.bn(features)
        x = self.drop(x)
        x = self.fc1(x)
        x = F.leaky_relu(x)

        x = self.fc2(x)
        x = F.leaky_relu(x)

        x = self.fc3(x)
        x = F.leaky_relu(x)

        logits = self.fc4(x)
        if self.output_classes == 1:
            logits = logits.squeeze(1)

        return logits, features


class STN(nn.Module):
    def __init__(self, features):
        super(STN, self).__init__()
        self.features = features

        # Spatial transformer localization-network
        self.localization = nn.Sequential(
            GlobalAvgPool2d(),
            Flatten()
        )

        # Regressor for the 3 * 2 affine matrix
        self.fc_loc = nn.Sequential(
            nn.Linear(self.features, 32),
            nn.ReLU(True),
            nn.Linear(32, 3 * 2)
        )

        # Initialize the weights/bias with identity transformation
        self.fc_loc[2].weight.data.zero_()
        self.fc_loc[2].bias.data.copy_(torch.tensor([1, 0, 0,
                                                     0, 1, 0], dtype=torch.float))

    def forward(self, image, features):
        xs = self.localization(features)
        theta = self.fc_loc(xs)
        theta = theta.view(-1, 2, 3)

        grid = F.affine_grid(theta, image.size())
        return F.grid_sample(image, grid)


class STNRegressionModel(nn.Module):
    def __init__(self, encoder: EncoderModule, num_dimensions=1, dropout=0.2, pretrained=True):
        super().__init__()
        features = encoder.output_filters[-1]
        self.stn = STN(features)
        self.encoder = encoder
        self.regressor = RegressionModule(features, num_dimensions, dropout=dropout)

    def forward(self, input):
        features = self.encoder(input)[-1]
        input_transformed = self.stn(input, features)
        features = self.encoder(input_transformed)[-1]
        logits, features = self.regressor(features)
        return {'logits': logits, 'features': features, 'stn': input_transformed}


class ClassifierModule(nn.Module):
    def __init__(self, input_features, output_classes, reduction=4, dropout=0.25):
        super().__init__()
        self.avg_pool = GlobalAvgPool2d()
        self.max_pool = GlobalMaxPool2d()
        self.bn = nn.BatchNorm1d(input_features * 2)
        self.drop = nn.Dropout(dropout)

        self.bottleneck = nn.Linear(input_features * 2, input_features // reduction)
        self.logits = nn.Linear(input_features // reduction, output_classes)

    def forward(self, input):
        x1 = self.avg_pool(input)
        x2 = self.max_pool(input)
        x = torch.cat([x1, x2], dim=1)
        features = x.view(x.size(0), -1)

        x = self.bn(features)
        x = swish(x)
        x = self.drop(x)
        x = self.bottleneck(x)
        x = swish(x)
        logits = self.logits(x)

        return logits, features


def crop_black(image, tolerance=10):
    gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    cv2.threshold(gray, tolerance, 255, type=cv2.THRESH_BINARY, dst=gray)
    cv2.medianBlur(gray, 7, gray)

    x, y, w, h = cv2.boundingRect(gray)

    # Sanity check for very dark images
    non_black_area = w * h
    image_area = image.shape[0] * image.shape[1]
    fg_ratio = non_black_area / image_area

    # If area of black region is more than half of the whole image area,
    # we do not crop it.
    if fg_ratio < 0.5:
        return image

    return image[y:y + h, x:x + w]


class CropBlackRegions(A.ImageOnlyTransform):
    def __init__(self, tolerance=15):
        super().__init__(always_apply=True, p=1)
        self.tolerance = tolerance

    def apply(self, img, **params):
        return crop_black(img, self.tolerance)

    def get_transform_init_args_names(self):
        return ('tolerance',)


def get_model(model_name, num_classes, pretrained=True, **kwargs):
    # Regression
    if model_name == 'reg_resnet18':
        assert num_classes == 1
        encoder = Resnet18Encoder(pretrained=pretrained)
        return BaselineRegressionModel(encoder)

    if model_name == 'reg_resnet50':
        assert num_classes == 1
        encoder = Resnet50Encoder(pretrained=pretrained)
        return BaselineRegressionModel(encoder, dropout=0.5)

    if model_name == 'reg_resnext50':
        assert num_classes == 1
        encoder = SEResNeXt50Encoder(pretrained=pretrained)
        return BaselineRegressionModel(encoder, dropout=0.5)

    if model_name == 'reg_resnext101':
        assert num_classes == 1
        encoder = SEResNeXt101Encoder(pretrained=pretrained)
        return BaselineRegressionModel(encoder, dropout=0.5)

    if model_name == 'reg_stn_resnet18':
        assert num_classes == 1
        encoder = Resnet18Encoder(pretrained=pretrained)
        return STNRegressionModel(encoder, pretrained=pretrained)

    if model_name == 'reg_resnext50':
        encoder = SEResNeXt50Encoder(pretrained=pretrained)
        return BaselineRegressionModel(encoder, num_classes)

    if model_name == 'reg_resnext101':
        encoder = SEResNeXt101Encoder(pretrained=pretrained)
        return BaselineRegressionModel(encoder, num_classes)

    if model_name == 'reg_effnet_b4':
        encoder = EfficientNetB4Encoder()
        return BaselineRegressionModel(encoder, num_classes)

    # Classification
    if model_name == 'cls_resnet18':
        encoder = Resnet18Encoder(pretrained=pretrained)
        return BaselineClassificationModel(encoder, num_classes)

    if model_name == 'cls_resnext50':
        encoder = SEResNeXt50Encoder(pretrained=pretrained)
        return BaselineClassificationModel(encoder, num_classes)

    if model_name == 'cls_resnext101':
        encoder = SEResNeXt101Encoder(pretrained=pretrained)
        return BaselineClassificationModel(encoder, num_classes)

    if model_name == 'cls_effnet_b4':
        encoder = EfficientNetB4Encoder()
        return BaselineClassificationModel(encoder, num_classes, dropout=0.5)

    if model_name == 'cls_resnext101':
        assert num_classes == 1
        encoder = SEResNeXt101Encoder(pretrained=pretrained)
        return BaselineClassificationModel(encoder, num_classes, dropout=0.5)

    raise ValueError(model_name)


def get_test_aug(image_size):
    longest_size = max(image_size[0], image_size[1])
    return A.Compose([
        CropBlackRegions(),
        A.LongestMaxSize(longest_size, interpolation=cv2.INTER_CUBIC),
        A.PadIfNeeded(image_size[0], image_size[1],
                      border_mode=cv2.BORDER_CONSTANT, value=0),
        A.Normalize()
    ])


class PickModelOutput(nn.Module):
    def __init__(self, target_key='logits'):
        super().__init__()
        self.target_key = target_key

    def forward(self, input):
        return input[self.target_key]


def run_model_inference(model_checkpoint: str,
                        test_csv: pd.DataFrame,
                        data_dir,
                        model_name=None,
                        batch_size=None,
                        image_size=(512, 512),
                        images_dir='test_images',
                        tta=None,
                        apply_softmax=True,
                        workers=None) -> pd.DataFrame:
    if workers is None:
        workers = multiprocessing.cpu_count()

    checkpoint = torch.load(model_checkpoint)
    if model_name is None:
        model_name = checkpoint['checkpoint_data']['cmd_args']['model']

    if batch_size is None:
        batch_size = checkpoint['checkpoint_data']['cmd_args']['batch_size']

    num_classes = len(get_class_names())
    if str.startswith(model_name, 'reg_'):
        num_classes = 1

    model = get_model(model_name, pretrained=False, num_classes=num_classes)
    model.load_state_dict(checkpoint['model_state_dict'])

    model = nn.Sequential(model, PickModelOutput('logits'))

    if apply_softmax:
        model = nn.Sequential(model, nn.Softmax(dim=1))

    if tta == '10crop':
        model = TTAWrapper(model, tencrop_image2label, crop_size=(384, 384))

    if tta == 'd4':
        model = TTAWrapper(model, d4_image2label)

    if tta == 'flip':
        model = TTAWrapper(model, fliplr_image2label)

    with torch.no_grad():
        model = model.eval().cuda()

        image_fnames = test_csv['id_code'].apply(lambda x: os.path.join(data_dir, images_dir, f'{x}.png'))
        test_ds = RetinopathyDataset(image_fnames, None, get_test_aug(image_size))
        data_loader = DataLoader(test_ds, batch_size,
                                 pin_memory=True,
                                 num_workers=workers)

        test_ids = []
        test_preds = []

        for batch in tqdm(data_loader):
            input = batch['image'].cuda(non_blocking=True)
            outputs = model(input)
            predictions = to_numpy(outputs)

            test_ids.extend(batch['image_id'])
            test_preds.extend(predictions)

        predictions = pd.DataFrame.from_dict({'id_code': test_ids, 'diagnosis': test_preds})

    del model, data_loader
    return predictions


def average_predictions(predictions):
    accumulator = np.zeros_like(predictions[0]['diagnosis'].values)
    for p in predictions:
        accumulator += p['diagnosis']
    accumulator /= len(predictions)
    result = predictions[0].copy()
    result['diagnosis'] = accumulator
    return result


def cls_predictions_to_submission(predictions) -> pd.DataFrame:
    predictions = predictions.copy()
    predictions['diagnosis'] = predictions['diagnosis'].apply(lambda x: np.argmax(x))
    return predictions


def reg_predictions_to_submission(predictions) -> pd.DataFrame:
    predictions = predictions.copy()
    x = torch.from_numpy(predictions['diagnosis'].values)
    x = regression_to_class(x)
    predictions['diagnosis'] = to_numpy(x)
    return predictions


def regression_to_class(value: torch.Tensor, min=0, max=4):
    value = torch.round(value)
    value = torch.clamp(value, min, max)
    return value.long()


